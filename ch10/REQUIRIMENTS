EXERCISES
10-1. Your car company has completed work on a service that detects speed limits
based on signage it observes on the side of the road. The speed-limit-detection
team will publish objects of the following type to the event bus periodically:
struct SpeedLimitDetected {
unsigned short speed_mps;
}
The service bus has been extended to incorporate this new type:
#include <functional>
--snip--
using SpeedUpdateCallback = std::function<void(const SpeedUpdate&)>;
using CarDetectedCallback = std::function<void(const CarDetected&)>;
using SpeedLimitCallback = std::function<void(const SpeedLimitDetected&)>;
struct IServiceBus {
virtual ~IServiceBus() = default;
virtual void publish(const BrakeCommand&) = 0;
virtual void subscribe(SpeedUpdateCallback) = 0;
virtual void subscribe(CarDetectedCallback) = 0;
virtual void subscribe(SpeedLimitCallback) = 0;
};
Update the service with the new interface and make sure the tests still pass.

10-2. Add a private field for the last known speed limit. Implement a getter
method for this field.

10-3. The product owner wants you to initialize the last known speed limit to

39 meters per second. Implement a unit test that checks a newly constructed
AutoBrake that has a last known speed limit of 39.

10-4. Make unit tests pass.

10-5. Implement a unit test where you publish three different SpeedLimitDetected
objects using the same callback technique you used for SpeedUpdate and
CarDetected. After invoking each of the callbacks, check the last known speed
limit on the AutoBrake object to ensure it matches.

10-6. Make all unit tests pass.

10-7. Implement a unit test where the last known speed limit is 35 meters
per second, and youâ€™re traveling at 34 meters per second. Ensure that no
BrakeCommand is published by AutoBrake.

10-8. Make all unit tests pass.

10-9. Implement a unit test where the last known speed limit is 35 meters
per second and then publish a SpeedUpdate at 40 meters per second. Ensure
that exactly one BrakeCommand is issued. The time_to_collision_s field should
equal 0.

10-10. Make all unit tests pass.

10-11. Implement a new unit test where the last known speed limit is 35 meters
per second and then publish a SpeedUpdate at 30 meters per second. Then
issue a SpeedLimitDetected with a speed_mps of 25 meters per second. Ensure
that exactly one BrakeCommand is issued. The time_to_collision_s field should
equal 0.

10-12. Make all unit tests pass.